{"remainingRequest":"D:\\Business\\web\\ibadurrahman v.2\\main\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\Business\\web\\ibadurrahman v.2\\main\\src\\views\\Donasi.vue?vue&type=template&id=09e6eaea&","dependencies":[{"path":"D:\\Business\\web\\ibadurrahman v.2\\main\\src\\views\\Donasi.vue","mtime":1647173283203},{"path":"D:\\Business\\web\\ibadurrahman v.2\\main\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1646742559094},{"path":"D:\\Business\\web\\ibadurrahman v.2\\main\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1646742567534},{"path":"D:\\Business\\web\\ibadurrahman v.2\\main\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1646742559094},{"path":"D:\\Business\\web\\ibadurrahman v.2\\main\\node_modules\\vue-loader\\lib\\index.js","mtime":1646742563638}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}